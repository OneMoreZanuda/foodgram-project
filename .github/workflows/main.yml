name: foodgram workflow

on: [workflow_dispatch]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    - name: Lint with flake8
      run: flake8 . --exclude migrations,settings.py

  build_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push foodgram to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: leshkakocheregka/foodgram:latest
 
  prepare_server:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: executing remote ssh commands to prepare server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.PRIVATE_SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
          if ! dpkg-query -W -f='${Status}' docker-ce | grep "ok installed"; then
            sudo apt remove docker docker-engine docker.io containerd runc
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt update
            sudo apt install docker-ce docker-compose -y
          fi
          if ! test -f "/usr/local/bin/docker-compose"; then
            sudo curl -L "https://github.com/docker/compose/releases/download/1.28.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker system prune -a -f
          sudo docker volume prune
          sudo docker network prune
  
  copy_files:
    runs-on: ubuntu-latest
    needs: prepare_server
    steps:
    - uses: actions/checkout@master
    - name: copy docker-compose file
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.PRIVATE_SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        source: "docker-compose.yaml"
        target: "/home/${{secrets.USER}}/foodgram"
    - name: copy nginx conf template and fixtures
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.PRIVATE_SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        source: "nginx/foodgram.conf.template,fixtures/fixtures.json"
        target: "/home/${{secrets.USER}}/foodgram"
        strip_components: 1

  deploy:
    runs-on: ubuntu-latest
    needs: copy_files
    if: github.ref == 'refs/heads/master'
    steps:
    - name: deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.PRIVATE_SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          cd /home/${{secrets.USER}}/foodgram
          touch .env
          echo 'secret_key=${{ secrets.SECRET_KEY }}' > .env
          echo 'postgres_user=${{ secrets.POSTGRES_USER }}' >> .env
          echo 'postgres_password=${{ secrets.POSTGRES_PASSWORD }}' >> .env
          echo 'host_ip=${{ secrets.HOST }}' >> .env
          mkdir -p nginx
          sudo mv foodgram.conf.template nginx/foodgram.conf.template
          sudo docker-compose up -d db
          sudo docker-compose up -d web
          sudo docker exec web python manage.py collectstatic --no-input
          sudo docker exec web python manage.py makemigrations --no-input
          sudo docker exec web python manage.py migrate --no-input
          sudo docker exec web python manage.py loaddata /fixtures/fixtures.json
          sudo docker-compose up -d nginx
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} completed successfully !
